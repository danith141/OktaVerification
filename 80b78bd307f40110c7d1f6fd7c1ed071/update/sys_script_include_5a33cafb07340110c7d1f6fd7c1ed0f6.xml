<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.OktaUserVerification</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>OktaUserVerification</name>
        <script><![CDATA[//OktaUserVerification script include
var OktaUserVerification = Class.create();
OktaUserVerification.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    getOktaID: function() { // This is the initial function that calls the Okta REST API and finds the user ID.  The return will be a JSON object that has the URLs for the other requests
        //get the properties
        const server = gs.getProperty('okta.user.verification.okta_server').trim();
        const api = gs.getProperty('okta.user.verification.okta_api_key').trim();
        const userRef = this.getParameter('sysparm_userref'); // get the userref from the client script/action
        this.debugLogger("getOktaID", "0: userRef is: " + userRef);
        
        // need to query the userref to get the SN user_id
        var grUserName = new GlideRecord('sys_user');
        grUserName.get(userRef);
        var userName = grUserName.user_name;
        this.debugLogger("getOktaID", "1: userName is: " + userName);
        if(userName && server && api){ //we need all these values, otherwise there is nothing to do
            try {
                const encodedUserName = encodeURIComponent(userName); //need to encode the username for the rest call
                var rest = new sn_ws.RESTMessageV2();
                rest.setHttpMethod('get'); // GET request for this
                rest.setEndpoint('https://' + server + '.okta.com/api/v1/users/' + encodedUserName ); //create the endpoint
                this.debugLogger("getOktaID", "2: REST endpoint is: " + rest.getEndpoint());

                //set the headers
                rest.setRequestHeader('Accept', 'application/json');
                rest.setRequestHeader('Authorization', 'SSWS ' + api);
                rest.setRequestHeader('Content-Type', 'application/json');

                //call the API
                const restResponse = rest.execute();
                const restResponseBody = restResponse.getBody();
                const restResponseStatus = restResponse.getStatusCode();

                //debugging
                this.debugLogger("getOktaID", "3a: restResponse is: " + restResponse);
                this.debugLogger("getOktaID", "3b: restResponseBody is: " + restResponseBody);
                this.debugLogger("getOktaID", "3c: restResponseStatus is: " + restResponseStatus);

            } catch (ex) {
                gs.info(ex);
            }

            return restResponseBody;
        }



    },

    debugLogger: function(from, message) {
        var debug = gs.getProperty('okta.user.verification.debug');
        var from = from ? from : '';
        if(debug == 'true' || debug == true){
            gs.info("DEBUG: " + from + "|" + message);
        }
        return true;
    },
      
    type: 'OktaUserVerification'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-09 03:45:51</sys_created_on>
        <sys_id>5a33cafb07340110c7d1f6fd7c1ed0f6</sys_id>
        <sys_mod_count>71</sys_mod_count>
        <sys_name>OktaUserVerification</sys_name>
        <sys_package display_value="Okta User Verification" source="80b78bd307f40110c7d1f6fd7c1ed071">80b78bd307f40110c7d1f6fd7c1ed071</sys_package>
        <sys_policy/>
        <sys_scope display_value="Okta User Verification">80b78bd307f40110c7d1f6fd7c1ed071</sys_scope>
        <sys_update_name>sys_script_include_5a33cafb07340110c7d1f6fd7c1ed0f6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-02-06 20:01:45</sys_updated_on>
    </sys_script_include>
</record_update>
